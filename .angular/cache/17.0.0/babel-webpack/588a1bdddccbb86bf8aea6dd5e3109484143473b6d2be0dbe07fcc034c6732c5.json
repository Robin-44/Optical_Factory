{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@auth0/auth0-angular\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationService {\n  auth;\n  router;\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n    // Configurez Auth0 pour utiliser localStorage ou sessionStorage\n    this.auth.handleRedirectCallback().subscribe(() => {\n      // Vérifiez si l'utilisateur est authentifié\n      if (localStorage.getItem('authToken')) {\n        this.auth.loginWithRedirect();\n      }\n    });\n  }\n  login() {\n    // Vous pouvez maintenant utiliser localStorage pour persister l'état d'authentification\n    this.auth.loginWithRedirect({\n      redirect_uri: window.location.origin\n    });\n  }\n  logout() {\n    // Supprimez l'élément du stockage lors de la déconnexion\n    localStorage.removeItem('authToken');\n    this.auth.logout({\n      returnTo: window.location.origin\n    });\n  }\n  getAuthState() {\n    return this.auth.isAuthenticated$;\n  }\n  static ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthenticationService","auth","router","constructor","handleRedirectCallback","subscribe","localStorage","getItem","loginWithRedirect","login","redirect_uri","window","location","origin","logout","removeItem","returnTo","getAuthState","isAuthenticated$","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/sullivan/Desktop/Optical_Factory/src/app/authentication-service/authentication-service.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthService } from '@auth0/auth0-angular';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  constructor(public auth: AuthService, private router: Router) {\n    // Configurez Auth0 pour utiliser localStorage ou sessionStorage\n    this.auth.handleRedirectCallback().subscribe(() => {\n      // Vérifiez si l'utilisateur est authentifié\n      if (localStorage.getItem('authToken')) {\n        this.auth.loginWithRedirect();\n      }\n    });\n  }\n\n  login() {\n    // Vous pouvez maintenant utiliser localStorage pour persister l'état d'authentification\n    this.auth.loginWithRedirect({\n      redirect_uri: window.location.origin\n    });\n  }\n\n  logout() {\n    // Supprimez l'élément du stockage lors de la déconnexion\n    localStorage.removeItem('authToken');\n    this.auth.logout({ returnTo: window.location.origin });\n  }\n\n  getAuthState() {\n    return this.auth.isAuthenticated$;\n  }\n}\n"],"mappings":";;;AAOA,OAAM,MAAOA,qBAAqB;EACbC,IAAA;EAA2BC,MAAA;EAA9CC,YAAmBF,IAAiB,EAAUC,MAAc;IAAzC,KAAAD,IAAI,GAAJA,IAAI;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAClD;IACA,IAAI,CAACD,IAAI,CAACG,sBAAsB,EAAE,CAACC,SAAS,CAAC,MAAK;MAChD;MACA,IAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE;QACrC,IAAI,CAACN,IAAI,CAACO,iBAAiB,EAAE;;IAEjC,CAAC,CAAC;EACJ;EAEAC,KAAKA,CAAA;IACH;IACA,IAAI,CAACR,IAAI,CAACO,iBAAiB,CAAC;MAC1BE,YAAY,EAAEC,MAAM,CAACC,QAAQ,CAACC;KAC/B,CAAC;EACJ;EAEAC,MAAMA,CAAA;IACJ;IACAR,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACpC,IAAI,CAACd,IAAI,CAACa,MAAM,CAAC;MAAEE,QAAQ,EAAEL,MAAM,CAACC,QAAQ,CAACC;IAAM,CAAE,CAAC;EACxD;EAEAI,YAAYA,CAAA;IACV,OAAO,IAAI,CAAChB,IAAI,CAACiB,gBAAgB;EACnC;;qBA1BWlB,qBAAqB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;;WAArBxB,qBAAqB;IAAAyB,OAAA,EAArBzB,qBAAqB,CAAA0B,IAAA;IAAAC,UAAA,EAFpB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}