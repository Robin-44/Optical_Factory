{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@auth0/auth0-angular\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationServiceComponent {\n  auth;\n  router;\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n    // Configurez Auth0 pour utiliser localStorage ou sessionStorage\n    this.auth.handleRedirectCallback().subscribe(() => {\n      // Vérifiez si l'utilisateur est authentifié\n      if (localStorage.getItem('authToken')) {\n        this.auth.loginWithRedirect();\n      }\n    });\n  }\n  checkLogin() {\n    if (localStorage.getItem(\"authToken\")) {\n      localStorage.setItem(\"authToken\", JSON.stringify(this.auth));\n    }\n  }\n  login() {\n    localStorage.setItem(\"authToken\", \"true\");\n  }\n  logout() {\n    // Supprimez l'élément du stockage lors de la déconnexion\n    localStorage.removeItem('authToken');\n  }\n  getAuthState() {\n    return this.auth.isAuthenticated$;\n  }\n  static ɵfac = function AuthenticationServiceComponent_Factory(t) {\n    return new (t || AuthenticationServiceComponent)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationServiceComponent,\n    factory: AuthenticationServiceComponent.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthenticationServiceComponent","auth","router","constructor","handleRedirectCallback","subscribe","localStorage","getItem","loginWithRedirect","checkLogin","setItem","JSON","stringify","login","logout","removeItem","getAuthState","isAuthenticated$","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/sullivan/Desktop/Optical_Factory/src/app/authentication-service/authentication-service.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthService } from '@auth0/auth0-angular';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationServiceComponent {\n  constructor(public auth: AuthService, private router: Router) {\n    // Configurez Auth0 pour utiliser localStorage ou sessionStorage\n    this.auth.handleRedirectCallback().subscribe(() => {\n      // Vérifiez si l'utilisateur est authentifié\n      if (localStorage.getItem('authToken')) {\n        this.auth.loginWithRedirect();\n      }\n    });\n  }\n  checkLogin() {\n    if(localStorage.getItem(\"authToken\")){\n      localStorage.setItem(\"authToken\",JSON.stringify(this.auth))\n    }\n  }\n\n  \n  login() {\n    localStorage.setItem(\"authToken\",\"true\")\n  }\n\n  logout() {\n    // Supprimez l'élément du stockage lors de la déconnexion\n    localStorage.removeItem('authToken');\n  }\n\n  getAuthState() {\n    return this.auth.isAuthenticated$;\n  }\n}\n"],"mappings":";;;AAOA,OAAM,MAAOA,8BAA8B;EACtBC,IAAA;EAA2BC,MAAA;EAA9CC,YAAmBF,IAAiB,EAAUC,MAAc;IAAzC,KAAAD,IAAI,GAAJA,IAAI;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAClD;IACA,IAAI,CAACD,IAAI,CAACG,sBAAsB,EAAE,CAACC,SAAS,CAAC,MAAK;MAChD;MACA,IAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE;QACrC,IAAI,CAACN,IAAI,CAACO,iBAAiB,EAAE;;IAEjC,CAAC,CAAC;EACJ;EACAC,UAAUA,CAAA;IACR,IAAGH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAC;MACnCD,YAAY,CAACI,OAAO,CAAC,WAAW,EAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACX,IAAI,CAAC,CAAC;;EAE/D;EAGAY,KAAKA,CAAA;IACHP,YAAY,CAACI,OAAO,CAAC,WAAW,EAAC,MAAM,CAAC;EAC1C;EAEAI,MAAMA,CAAA;IACJ;IACAR,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;EACtC;EAEAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACf,IAAI,CAACgB,gBAAgB;EACnC;;qBA5BWjB,8BAA8B,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;;WAA9BvB,8BAA8B;IAAAwB,OAAA,EAA9BxB,8BAA8B,CAAAyB,IAAA;IAAAC,UAAA,EAF7B;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}